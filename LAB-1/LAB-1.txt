#include <iostream>
#include <vector>
#include <limits>

using namespace std;

void printArray(const vector<int>& arr) {
    if (arr.empty()) {
        cout << "Array is empty." << endl;
        return;
    }
    cout << "Array elements: ";
    for (int element : arr) {
        cout << element << " ";
    }
    cout << endl;
}

void createArray(vector<int>& arr, int size) {
    arr.resize(size);
    cout << "Enter " << size << " elements:" << endl;
    for (int i = 0; i < size; ++i) {
        cout << "Enter element " << i + 1 << ": ";
        cin >> arr[i];
    }
    cout << "Array created successfully." << endl;
}

void insertElement(vector<int>& arr) {
    int element, position;
    cout << "Enter the element to insert: ";
    cin >> element;
    cout << "Enter the position to insert (0-indexed): ";
    cin >> position;

    if (position < 0 || position > arr.size()) {
        cout << "Invalid position." << endl;
        return;
    }

    arr.insert(arr.begin() + position, element);
    cout << "Element inserted successfully." << endl;
}

void deleteElement(vector<int>& arr) {
    int position;
    cout << "Enter the position to delete (0-indexed): ";
    cin >> position;

    if (position < 0 || position >= arr.size()) {
        cout << "Invalid position." << endl;
        return;
    }

    arr.erase(arr.begin() + position);
    cout << "Element deleted successfully." << endl;
}

void linearSearch(const vector<int>& arr) {
    int target;
    cout << "Enter the element to search for: ";
    cin >> target;

    bool found = false;
    for (int i = 0; i < arr.size(); ++i) {
        if (arr[i] == target) {
            cout << "Element " << target << " found at index " << i << "." << endl;
            found = true;
            break;
        }
    }
    if (!found) {
        cout << "Element " << target << " not found in the array." << endl;
    }
}

void removeDuplicates(vector<int>& arr) {
    if (arr.empty()) {
        cout << "Array is empty." << endl;
        return;
    }

    vector<int> uniqueArr;
    for (int element : arr) {
        bool isDuplicate = false;
        for (int uniqueElement : uniqueArr) {
            if (element == uniqueElement) {
                isDuplicate = true;
                break;
            }
        }
        if (!isDuplicate) {
            uniqueArr.push_back(element);
        }
    }
    arr = uniqueArr;
    cout << "Duplicates removed. The array now contains unique elements." << endl;
}

void reverseArray(vector<int>& arr) {
    if (arr.empty()) {
        cout << "Array is empty." << endl;
        return;
    }
    int start = 0;
    int end = arr.size() - 1;
    while (start < end) {
        swap(arr[start], arr[end]);
        start++;
        end--;
    }
    cout << "Array reversed successfully." << endl;
}

void matrixMultiplication(int rows1, int cols1, int rows2, int cols2) {
    if (cols1 != rows2) {
        cout << "Matrix multiplication not possible. Columns of first matrix must equal rows of second." << endl;
        return;
    }

    vector<vector<int>> matrix1(rows1, vector<int>(cols1));
    vector<vector<int>> matrix2(rows2, vector<int>(cols2));
    vector<vector<int>> result(rows1, vector<int>(cols2, 0));

    cout << "Enter elements for the first matrix (" << rows1 << "x" << cols1 << "):" << endl;
    for (int i = 0; i < rows1; ++i) {
        for (int j = 0; j < cols1; ++j) {
            cin >> matrix1[i][j];
        }
    }

    cout << "Enter elements for the second matrix (" << rows2 << "x" << cols2 << "):" << endl;
    for (int i = 0; i < rows2; ++i) {
        for (int j = 0; j < cols2; ++j) {
            cin >> matrix2[i][j];
        }
    }

    for (int i = 0; i < rows1; ++i) {
        for (int j = 0; j < cols2; ++j) {
            for (int k = 0; k < cols1; ++k) {
                result[i][j] += matrix1[i][k] * matrix2[k][j];
            }
        }
    }

    cout << "Result of matrix multiplication:" << endl;
    for (int i = 0; i < rows1; ++i) {
        for (int j = 0; j < cols2; ++j) {
            cout << result[i][j] << " ";
        }
        cout << endl;
    }
}

void transposeMatrix() {
    int rows, cols;
    cout << "Enter the number of rows and columns for the matrix: ";
    cin >> rows >> cols;

    vector<vector<int>> matrix(rows, vector<int>(cols));
    vector<vector<int>> transpose(cols, vector<int>(rows));

    cout << "Enter elements for the matrix:" << endl;
    for (int i = 0; i < rows; ++i) {
        for (int j = 0; j < cols; ++j) {
            cin >> matrix[i][j];
        }
    }

    for (int i = 0; i < rows; ++i) {
        for (int j = 0; j < cols; ++j) {
            transpose[j][i] = matrix[i][j];
        }
    }

    cout << "Original Matrix:" << endl;
    for (int i = 0; i < rows; ++i) {
        for (int j = 0; j < cols; ++j) {
            cout << matrix[i][j] << " ";
        }
        cout << endl;
    }

    cout << "Transpose of the Matrix:" << endl;
    for (int i = 0; i < cols; ++i) {
        for (int j = 0; j < rows; ++j) {
            cout << transpose[i][j] << " ";
        }
        cout << endl;
    }
}

void sumOfRowsAndColumns() {
    int rows, cols;
    cout << "Enter the number of rows and columns for the matrix: ";
    cin >> rows >> cols;

    vector<vector<int>> matrix(rows, vector<int>(cols));
    cout << "Enter elements for the matrix:" << endl;
    for (int i = 0; i < rows; ++i) {
        for (int j = 0; j < cols; ++j) {
            cin >> matrix[i][j];
        }
    }

    cout << "Row sums:" << endl;
    for (int i = 0; i < rows; ++i) {
        int rowSum = 0;
        for (int j = 0; j < cols; ++j) {
            rowSum += matrix[i][j];
        }
        cout << "Sum of row " << i + 1 << ": " << rowSum << endl;
    }

    cout << "Column sums:" << endl;
    for (int j = 0; j < cols; ++j) {
        int colSum = 0;
        for (int i = 0; i < rows; ++i) {
            colSum += matrix[i][j];
        }
        cout << "Sum of column " << j + 1 << ": " << colSum << endl;
    }
}

int main() {
    int choice;
    vector<int> arr;
    int rows1, cols1, rows2, cols2;

    do {
        cout << "\n--- MENU ---" << endl;
        cout << "1. CREATE a 1D Array" << endl;
        cout << "2. DISPLAY 1D Array" << endl;
        cout << "3. INSERT an element" << endl;
        cout << "4. DELETE an element" << endl;
        cout << "5. LINEAR SEARCH" << endl;
        cout << "6. Remove Duplicates" << endl;
        cout << "7. Reverse the array" << endl;
        cout << "8. Matrix Multiplication" << endl;
        cout << "9. Transpose of a Matrix" << endl;
        cout << "10. Sum of rows and columns of a Matrix" << endl;
        cout << "11. EXIT" << endl;
        cout << "Enter your choice: ";
        cin >> choice;

        cin.ignore(numeric_limits<streamsize>::max(), '\n');

        switch (choice) {
            case 1: {
                int size;
                cout << "Enter the size of the array: ";
                cin >> size;
                createArray(arr, size);
                break;
            }
            case 2:
                printArray(arr);
                break;
            case 3:
                insertElement(arr);
                break;
            case 4:
                deleteElement(arr);
                break;
            case 5:
                linearSearch(arr);
                break;
            case 6:
                removeDuplicates(arr);
                break;
            case 7:
                reverseArray(arr);
                break;
            case 8:
                cout << "Enter dimensions for the first matrix (rows, cols): ";
                cin >> rows1 >> cols1;
                cout << "Enter dimensions for the second matrix (rows, cols): ";
                cin >> rows2 >> cols2;
                matrixMultiplication(rows1, cols1, rows2, cols2);
                break;
            case 9:
                transposeMatrix();
                break;
            case 10:
                sumOfRowsAndColumns();
                break;
            case 11:
                cout << "Exiting program. Goodbye!" << endl;
                break;
            default:
                cout << "Invalid choice. Please try again." << endl;
        }

    } while (choice != 11);

    return 0;
}


